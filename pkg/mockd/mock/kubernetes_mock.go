// Code generated by MockGen. DO NOT EDIT.
// Source: ../kt/cluster/types.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
)

// MockKubernetesInterface is a mock of KubernetesInterface interface
type MockKubernetesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesInterfaceMockRecorder
}

// MockKubernetesInterfaceMockRecorder is the mock recorder for MockKubernetesInterface
type MockKubernetesInterfaceMockRecorder struct {
	mock *MockKubernetesInterface
}

// NewMockKubernetesInterface creates a new mock instance
func NewMockKubernetesInterface(ctrl *gomock.Controller) *MockKubernetesInterface {
	mock := &MockKubernetesInterface{ctrl: ctrl}
	mock.recorder = &MockKubernetesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesInterface) EXPECT() *MockKubernetesInterfaceMockRecorder {
	return m.recorder
}

// Deployment mocks base method
func (m *MockKubernetesInterface) Deployment(name, namespace string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deployment", name, namespace)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deployment indicates an expected call of Deployment
func (mr *MockKubernetesInterfaceMockRecorder) Deployment(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deployment", reflect.TypeOf((*MockKubernetesInterface)(nil).Deployment), name, namespace)
}

// Scale mocks base method
func (m *MockKubernetesInterface) Scale(deployment *v1.Deployment, replicas *int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", deployment, replicas)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scale indicates an expected call of Scale
func (mr *MockKubernetesInterfaceMockRecorder) Scale(deployment, replicas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockKubernetesInterface)(nil).Scale), deployment, replicas)
}

// ServiceHosts mocks base method
func (m *MockKubernetesInterface) ServiceHosts(namespace string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceHosts", namespace)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ServiceHosts indicates an expected call of ServiceHosts
func (mr *MockKubernetesInterfaceMockRecorder) ServiceHosts(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceHosts", reflect.TypeOf((*MockKubernetesInterface)(nil).ServiceHosts), namespace)
}

// ClusterCrids mocks base method
func (m *MockKubernetesInterface) ClusterCrids(podCIDR string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCrids", podCIDR)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterCrids indicates an expected call of ClusterCrids
func (mr *MockKubernetesInterfaceMockRecorder) ClusterCrids(podCIDR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCrids", reflect.TypeOf((*MockKubernetesInterface)(nil).ClusterCrids), podCIDR)
}

// CreateShadow mocks base method
func (m *MockKubernetesInterface) CreateShadow(name, namespace, image string, labels map[string]string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShadow", name, namespace, image, labels)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateShadow indicates an expected call of CreateShadow
func (mr *MockKubernetesInterfaceMockRecorder) CreateShadow(name, namespace, image, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShadow", reflect.TypeOf((*MockKubernetesInterface)(nil).CreateShadow), name, namespace, image, labels)
}
