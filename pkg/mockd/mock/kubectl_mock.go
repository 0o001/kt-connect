// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/kubectl/types.go

// Package mock is a generated GoMock package.
package mock

import (
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKubernetesCliInterface is a mock of KubernetesCliInterface interface
type MockKubernetesCliInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesCliInterfaceMockRecorder
}

// MockKubernetesCliInterfaceMockRecorder is the mock recorder for MockKubernetesCliInterface
type MockKubernetesCliInterfaceMockRecorder struct {
	mock *MockKubernetesCliInterface
}

// NewMockKubernetesCliInterface creates a new mock instance
func NewMockKubernetesCliInterface(ctrl *gomock.Controller) *MockKubernetesCliInterface {
	mock := &MockKubernetesCliInterface{ctrl: ctrl}
	mock.recorder = &MockKubernetesCliInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubernetesCliInterface) EXPECT() *MockKubernetesCliInterfaceMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockKubernetesCliInterface) Version() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockKubernetesCliInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKubernetesCliInterface)(nil).Version))
}

// ApplyDashboardToCluster mocks base method
func (m *MockKubernetesCliInterface) ApplyDashboardToCluster() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyDashboardToCluster")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// ApplyDashboardToCluster indicates an expected call of ApplyDashboardToCluster
func (mr *MockKubernetesCliInterfaceMockRecorder) ApplyDashboardToCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyDashboardToCluster", reflect.TypeOf((*MockKubernetesCliInterface)(nil).ApplyDashboardToCluster))
}

// PortForwardDashboardToLocal mocks base method
func (m *MockKubernetesCliInterface) PortForwardDashboardToLocal(port string) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForwardDashboardToLocal", port)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// PortForwardDashboardToLocal indicates an expected call of PortForwardDashboardToLocal
func (mr *MockKubernetesCliInterfaceMockRecorder) PortForwardDashboardToLocal(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForwardDashboardToLocal", reflect.TypeOf((*MockKubernetesCliInterface)(nil).PortForwardDashboardToLocal), port)
}

// PortForward mocks base method
func (m *MockKubernetesCliInterface) PortForward(namespace, resource string, remotePort int) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForward", namespace, resource, remotePort)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// PortForward indicates an expected call of PortForward
func (mr *MockKubernetesCliInterfaceMockRecorder) PortForward(namespace, resource, remotePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockKubernetesCliInterface)(nil).PortForward), namespace, resource, remotePort)
}
