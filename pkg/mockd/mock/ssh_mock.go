// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/ssh/types.go

// Package mock is a generated GoMock package.
package mock

import (
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSshClIInterface is a mock of SshClIInterface interface
type MockSshClIInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSshClIInterfaceMockRecorder
}

// MockSshClIInterfaceMockRecorder is the mock recorder for MockSshClIInterface
type MockSshClIInterfaceMockRecorder struct {
	mock *MockSshClIInterface
}

// NewMockSshClIInterface creates a new mock instance
func NewMockSshClIInterface(ctrl *gomock.Controller) *MockSshClIInterface {
	mock := &MockSshClIInterface{ctrl: ctrl}
	mock.recorder = &MockSshClIInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSshClIInterface) EXPECT() *MockSshClIInterfaceMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockSshClIInterface) Version() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockSshClIInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSshClIInterface)(nil).Version))
}

// ForwardRemoteRequestToLocal mocks base method
func (m *MockSshClIInterface) ForwardRemoteRequestToLocal(localPort, remoteHost, remotePort, privateKeyPath string, remoteSSHPort int) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardRemoteRequestToLocal", localPort, remoteHost, remotePort, privateKeyPath, remoteSSHPort)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// ForwardRemoteRequestToLocal indicates an expected call of ForwardRemoteRequestToLocal
func (mr *MockSshClIInterfaceMockRecorder) ForwardRemoteRequestToLocal(localPort, remoteHost, remotePort, privateKeyPath, remoteSSHPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardRemoteRequestToLocal", reflect.TypeOf((*MockSshClIInterface)(nil).ForwardRemoteRequestToLocal), localPort, remoteHost, remotePort, privateKeyPath, remoteSSHPort)
}

// DynamicForwardLocalRequestToRemote mocks base method
func (m *MockSshClIInterface) DynamicForwardLocalRequestToRemote(remoteHost, privateKeyPath string, remoteSSHPort, proxyPort int) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynamicForwardLocalRequestToRemote", remoteHost, privateKeyPath, remoteSSHPort, proxyPort)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// DynamicForwardLocalRequestToRemote indicates an expected call of DynamicForwardLocalRequestToRemote
func (mr *MockSshClIInterfaceMockRecorder) DynamicForwardLocalRequestToRemote(remoteHost, privateKeyPath, remoteSSHPort, proxyPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynamicForwardLocalRequestToRemote", reflect.TypeOf((*MockSshClIInterface)(nil).DynamicForwardLocalRequestToRemote), remoteHost, privateKeyPath, remoteSSHPort, proxyPort)
}
