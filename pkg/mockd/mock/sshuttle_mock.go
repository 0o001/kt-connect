// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/sshuttle/types.go

// Package mock is a generated GoMock package.
package mock

import (
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSSHUttleInterface is a mock of SSHUttleInterface interface
type MockSSHUttleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSHUttleInterfaceMockRecorder
}

// MockSSHUttleInterfaceMockRecorder is the mock recorder for MockSSHUttleInterface
type MockSSHUttleInterfaceMockRecorder struct {
	mock *MockSSHUttleInterface
}

// NewMockSSHUttleInterface creates a new mock instance
func NewMockSSHUttleInterface(ctrl *gomock.Controller) *MockSSHUttleInterface {
	mock := &MockSSHUttleInterface{ctrl: ctrl}
	mock.recorder = &MockSSHUttleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSSHUttleInterface) EXPECT() *MockSSHUttleInterfaceMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockSSHUttleInterface) Version() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockSSHUttleInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSSHUttleInterface)(nil).Version))
}

// Connect mocks base method
func (m *MockSSHUttleInterface) Connect(remoteHost, privateKeyPath string, remotePort int, DNSServer string, disableDNS bool, cidrs []string, debug bool) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", remoteHost, privateKeyPath, remotePort, DNSServer, disableDNS, cidrs, debug)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockSSHUttleInterfaceMockRecorder) Connect(remoteHost, privateKeyPath, remotePort, DNSServer, disableDNS, cidrs, debug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSSHUttleInterface)(nil).Connect), remoteHost, privateKeyPath, remotePort, DNSServer, disableDNS, cidrs, debug)
}
