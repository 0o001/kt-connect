// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/types.go

// Package exec is a generated GoMock package.
package exec

import (
	reflect "reflect"

	kubectl "github.com/alibaba/kt-connect/pkg/kt/exec/kubectl"
	ssh "github.com/alibaba/kt-connect/pkg/kt/exec/ssh"
	sshuttle "github.com/alibaba/kt-connect/pkg/kt/exec/sshuttle"
	gomock "github.com/golang/mock/gomock"
)

// MockCliInterface is a mock of CliInterface interface
type MockCliInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCliInterfaceMockRecorder
}

// MockCliInterfaceMockRecorder is the mock recorder for MockCliInterface
type MockCliInterfaceMockRecorder struct {
	mock *MockCliInterface
}

// NewMockCliInterface creates a new mock instance
func NewMockCliInterface(ctrl *gomock.Controller) *MockCliInterface {
	mock := &MockCliInterface{ctrl: ctrl}
	mock.recorder = &MockCliInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCliInterface) EXPECT() *MockCliInterfaceMockRecorder {
	return m.recorder
}

// KubectlInterface mocks base method
func (m *MockCliInterface) KubectlInterface() kubectl.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubectlInterface")
	ret0, _ := ret[0].(kubectl.CliInterface)
	return ret0
}

// KubectlInterface indicates an expected call of KubectlInterface
func (mr *MockCliInterfaceMockRecorder) KubectlInterface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubectlInterface", reflect.TypeOf((*MockCliInterface)(nil).KubectlInterface))
}

// SSHUttleInterface mocks base method
func (m *MockCliInterface) SSHUttleInterface() sshuttle.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHUttleInterface")
	ret0, _ := ret[0].(sshuttle.CliInterface)
	return ret0
}

// SSHUttleInterface indicates an expected call of SSHUttleInterface
func (mr *MockCliInterfaceMockRecorder) SSHUttleInterface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHUttleInterface", reflect.TypeOf((*MockCliInterface)(nil).SSHUttleInterface))
}

// SSHInterface mocks base method
func (m *MockCliInterface) SSHInterface() ssh.CliInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHInterface")
	ret0, _ := ret[0].(ssh.CliInterface)
	return ret0
}

// SSHInterface indicates an expected call of SSHInterface
func (mr *MockCliInterfaceMockRecorder) SSHInterface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHInterface", reflect.TypeOf((*MockCliInterface)(nil).SSHInterface))
}
