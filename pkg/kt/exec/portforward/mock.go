// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/portforward/types.go

// Package portforward is a generated GoMock package.
package portforward

import (
	context "context"
	reflect "reflect"

	options "github.com/alibaba/kt-connect/pkg/kt/options"
	gomock "github.com/golang/mock/gomock"
)

// MockCliInterface is a mock of CliInterface interface.
type MockCliInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCliInterfaceMockRecorder
}

// MockCliInterfaceMockRecorder is the mock recorder for MockCliInterface.
type MockCliInterfaceMockRecorder struct {
	mock *MockCliInterface
}

// NewMockCliInterface creates a new mock instance.
func NewMockCliInterface(ctrl *gomock.Controller) *MockCliInterface {
	mock := &MockCliInterface{ctrl: ctrl}
	mock.recorder = &MockCliInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliInterface) EXPECT() *MockCliInterfaceMockRecorder {
	return m.recorder
}

// ForwardPodPortToLocal mocks base method.
func (m *MockCliInterface) ForwardPodPortToLocal(options *options.DaemonOptions, podName string, remotePort, localPort int) (chan struct{}, context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardPodPortToLocal", options, podName, remotePort, localPort)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ForwardPodPortToLocal indicates an expected call of ForwardPodPortToLocal.
func (mr *MockCliInterfaceMockRecorder) ForwardPodPortToLocal(options, podName, remotePort, localPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardPodPortToLocal", reflect.TypeOf((*MockCliInterface)(nil).ForwardPodPortToLocal), options, podName, remotePort, localPort)
}
