// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/tun/types.go

// Package tun is a generated GoMock package.
package tun

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCliInterface is a mock of CliInterface interface.
type MockCliInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCliInterfaceMockRecorder
}

// MockCliInterfaceMockRecorder is the mock recorder for MockCliInterface.
type MockCliInterfaceMockRecorder struct {
	mock *MockCliInterface
}

// NewMockCliInterface creates a new mock instance.
func NewMockCliInterface(ctrl *gomock.Controller) *MockCliInterface {
	mock := &MockCliInterface{ctrl: ctrl}
	mock.recorder = &MockCliInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliInterface) EXPECT() *MockCliInterfaceMockRecorder {
	return m.recorder
}

// SetDnsServer mocks base method.
func (m *MockCliInterface) SetDnsServer(dnsServers []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDnsServer", dnsServers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDnsServer indicates an expected call of SetDnsServer.
func (mr *MockCliInterfaceMockRecorder) SetDnsServer(dnsServers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDnsServer", reflect.TypeOf((*MockCliInterface)(nil).SetDnsServer), dnsServers)
}

// SetRoute mocks base method.
func (m *MockCliInterface) SetRoute(ipRange []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRoute", ipRange)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRoute indicates an expected call of SetRoute.
func (mr *MockCliInterfaceMockRecorder) SetRoute(ipRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoute", reflect.TypeOf((*MockCliInterface)(nil).SetRoute), ipRange)
}

// ToSocks mocks base method.
func (m *MockCliInterface) ToSocks(sockAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSocks", sockAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToSocks indicates an expected call of ToSocks.
func (mr *MockCliInterfaceMockRecorder) ToSocks(sockAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSocks", reflect.TypeOf((*MockCliInterface)(nil).ToSocks), sockAddr)
}
