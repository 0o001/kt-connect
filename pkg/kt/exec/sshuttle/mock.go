// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/exec/sshuttle/types.go

// Package sshuttle is a generated GoMock package.
package sshuttle

import (
	exec "os/exec"
	reflect "reflect"

	options "github.com/alibaba/kt-connect/pkg/kt/options"
	gomock "github.com/golang/mock/gomock"
)

// MockSshuttle is a mock of Sshuttle interface.
type MockSshuttle struct {
	ctrl     *gomock.Controller
	recorder *MockSshuttleMockRecorder
}

// MockSshuttleMockRecorder is the mock recorder for MockSshuttle.
type MockSshuttleMockRecorder struct {
	mock *MockSshuttle
}

// NewMockSshuttle creates a new mock instance.
func NewMockSshuttle(ctrl *gomock.Controller) *MockSshuttle {
	mock := &MockSshuttle{ctrl: ctrl}
	mock.recorder = &MockSshuttleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSshuttle) EXPECT() *MockSshuttleMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockSshuttle) Connect(opt *options.ConnectOptions, req *SSHVPNRequest) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", opt, req)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockSshuttleMockRecorder) Connect(opt, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockSshuttle)(nil).Connect), opt, req)
}

// Install mocks base method.
func (m *MockSshuttle) Install() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockSshuttleMockRecorder) Install() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockSshuttle)(nil).Install))
}

// Version mocks base method.
func (m *MockSshuttle) Version() *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockSshuttleMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockSshuttle)(nil).Version))
}
