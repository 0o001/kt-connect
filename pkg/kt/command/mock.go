// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/command/types.go

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	kt "github.com/alibaba/kt-connect/pkg/kt"
	gomock "github.com/golang/mock/gomock"
)

// MockActionInterface is a mock of ActionInterface interface.
type MockActionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockActionInterfaceMockRecorder
}

// MockActionInterfaceMockRecorder is the mock recorder for MockActionInterface.
type MockActionInterfaceMockRecorder struct {
	mock *MockActionInterface
}

// NewMockActionInterface creates a new mock instance.
func NewMockActionInterface(ctrl *gomock.Controller) *MockActionInterface {
	mock := &MockActionInterface{ctrl: ctrl}
	mock.recorder = &MockActionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionInterface) EXPECT() *MockActionInterfaceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockActionInterface) Clean(cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockActionInterfaceMockRecorder) Clean(cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockActionInterface)(nil).Clean), cli)
}

// Connect mocks base method.
func (m *MockActionInterface) Connect(cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockActionInterfaceMockRecorder) Connect(cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockActionInterface)(nil).Connect), cli)
}

// Exchange mocks base method.
func (m *MockActionInterface) Exchange(resourceName string, cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", resourceName, cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exchange indicates an expected call of Exchange.
func (mr *MockActionInterfaceMockRecorder) Exchange(resourceName, cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockActionInterface)(nil).Exchange), resourceName, cli)
}

// Mesh mocks base method.
func (m *MockActionInterface) Mesh(deploymentName string, cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mesh", deploymentName, cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mesh indicates an expected call of Mesh.
func (mr *MockActionInterfaceMockRecorder) Mesh(deploymentName, cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mesh", reflect.TypeOf((*MockActionInterface)(nil).Mesh), deploymentName, cli)
}

// Preview mocks base method.
func (m *MockActionInterface) Preview(serviceName string, cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preview", serviceName, cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Preview indicates an expected call of Preview.
func (mr *MockActionInterfaceMockRecorder) Preview(serviceName, cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preview", reflect.TypeOf((*MockActionInterface)(nil).Preview), serviceName, cli)
}
