// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kt/command/types.go

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	kt "github.com/alibaba/kt-connect/pkg/kt"
	options "github.com/alibaba/kt-connect/pkg/kt/options"
	gomock "github.com/golang/mock/gomock"
)

// MockActionInterface is a mock of ActionInterface interface.
type MockActionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockActionInterfaceMockRecorder
}

// MockActionInterfaceMockRecorder is the mock recorder for MockActionInterface.
type MockActionInterfaceMockRecorder struct {
	mock *MockActionInterface
}

// NewMockActionInterface creates a new mock instance.
func NewMockActionInterface(ctrl *gomock.Controller) *MockActionInterface {
	mock := &MockActionInterface{ctrl: ctrl}
	mock.recorder = &MockActionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionInterface) EXPECT() *MockActionInterfaceMockRecorder {
	return m.recorder
}

// ApplyDashboard mocks base method.
func (m *MockActionInterface) ApplyDashboard(cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyDashboard", cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyDashboard indicates an expected call of ApplyDashboard.
func (mr *MockActionInterfaceMockRecorder) ApplyDashboard(cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyDashboard", reflect.TypeOf((*MockActionInterface)(nil).ApplyDashboard), cli, options)
}

// Check mocks base method.
func (m *MockActionInterface) Check(cli kt.CliInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockActionInterfaceMockRecorder) Check(cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockActionInterface)(nil).Check), cli)
}

// Clean mocks base method.
func (m *MockActionInterface) Clean(cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockActionInterfaceMockRecorder) Clean(cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockActionInterface)(nil).Clean), cli, options)
}

// Connect mocks base method.
func (m *MockActionInterface) Connect(cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockActionInterfaceMockRecorder) Connect(cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockActionInterface)(nil).Connect), cli, options)
}

// Exchange mocks base method.
func (m *MockActionInterface) Exchange(deploymentName string, cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", deploymentName, cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exchange indicates an expected call of Exchange.
func (mr *MockActionInterfaceMockRecorder) Exchange(deploymentName, cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockActionInterface)(nil).Exchange), deploymentName, cli, options)
}

// ExchangePod mocks base method.
func (m *MockActionInterface) ExchangePod(podName string, cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangePod", podName, cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangePod indicates an expected call of ExchangePod.
func (mr *MockActionInterfaceMockRecorder) ExchangePod(podName, cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangePod", reflect.TypeOf((*MockActionInterface)(nil).ExchangePod), podName, cli, options)
}

// Mesh mocks base method.
func (m *MockActionInterface) Mesh(deploymentName string, cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mesh", deploymentName, cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mesh indicates an expected call of Mesh.
func (mr *MockActionInterfaceMockRecorder) Mesh(deploymentName, cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mesh", reflect.TypeOf((*MockActionInterface)(nil).Mesh), deploymentName, cli, options)
}

// OpenDashboard mocks base method.
func (m *MockActionInterface) OpenDashboard(cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDashboard", cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenDashboard indicates an expected call of OpenDashboard.
func (mr *MockActionInterfaceMockRecorder) OpenDashboard(cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDashboard", reflect.TypeOf((*MockActionInterface)(nil).OpenDashboard), cli, options)
}

// Provide mocks base method.
func (m *MockActionInterface) Provide(serviceName string, cli kt.CliInterface, options *options.DaemonOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", serviceName, cli, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provide indicates an expected call of Provide.
func (mr *MockActionInterfaceMockRecorder) Provide(serviceName, cli, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockActionInterface)(nil).Provide), serviceName, cli, options)
}
